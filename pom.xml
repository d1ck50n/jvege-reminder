<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
<!--
    to build the package, follow these steps :
    1. update the version
    2. change the <url> to point to google drive, or other hosting space
    3. run mvn clean package
    4. copy target\jnlp\* into target <url>
-->
    <modelVersion>4.0.0</modelVersion>
    <groupId>com.jvege</groupId>
    <artifactId>jvege</artifactId>
    <version>1.2-SNAPSHOT</version>
    <packaging>jar</packaging>
    <name>jVege</name>
<!--<url>https://googledrive.com/host/0B7evS-BD_x5WbHFPTTlVYnprVzg/jnlp</url>-->
    <url></url>
    <description>jVege</description>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <log4j.version>1.2.16</log4j.version>
        <toplink.version>2.1-59</toplink.version>
        <h2.version>1.3.173</h2.version>
        <maven.jar.version>2.3.2</maven.jar.version>
        <maven.dependency.jar.version>2.1</maven.dependency.jar.version>
        <junit.version>4.8.2</junit.version>
        <jdk.version>1.6</jdk.version>
        <ant.version>1.7</ant.version>
    </properties>

    <build>
        <plugins>

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>2.3.2</version>
                <configuration>
                    <source>${jdk.version}</source>
                    <target>${jdk.version}</target>
                </configuration>
            </plugin>

            <!-- This plugin use to generate single executable jar START -->
            <!--plugin>
                <artifactId>maven-assembly-plugin</artifactId>
                <version>2.2.1</version>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.jvege.view.MainFrame</mainClass>
                        </manifest>
                    </archive>
                    <descriptorRefs>
                        <descriptorRef>jar-with-dependencies</descriptorRef>
                    </descriptorRefs>
                    <finalName>jvege</finalName>
                    <appendAssemblyId>false</appendAssemblyId>
                </configuration>
                <executions>
                    <execution>
                        <id>make-assembly</id>
                        <phase>package</phase>
                        <goals>
                            <goal>single</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin-->
            <!-- This plugin use to generate single executable jar END -->

            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <version>${ant.version}</version>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <configuration>
                            <target>
                                <copy file="src/main/resources/images/clock.jpg" todir="target/jnlp"/>
                            </target>
                        </configuration>
                        <goals>
                            <goal>run</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>webstart-maven-plugin</artifactId>
                <version>1.0-beta-3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>jnlp</goal> <!-- use jnlp, jnlp-inline or jnlp-single as appropriate -->
                        </goals>
                        <phase>package</phase>
                    </execution>
                </executions>
                <configuration>
                    <!--outputDirectory></outputDirectory--> <!-- not required?? -->
                    <excludeTransitive>false</excludeTransitive>
                    <!-- The path where the libraries are stored within the jnlp structure. not required. by default the libraries are within the working directory -->
                    <libPath>lib</libPath>
                    <!-- [optional] transitive dependencies filter - if omitted, all transitive dependencies are included -->
                    <dependencies>
                        <!-- Note that only groupId and artifactId must be specified here. because of a limitation of the Include/ExcludesArtifactFilter -->
                        <!--                        <includes>
                            <include>commons-logging:commons-logging</include>
                            <include>commons-cli:commons-cli</include>
                        </includes>-->
                        <!-- excludes>
                          <exclude></exclude>
                        <excludes-->
                    </dependencies>

                    <!--resourcesDirectory>${project.basedir}/src/main/jnlp/resources</resourcesDirectory--> <!-- default value -->

                    <!-- JNLP generation -->
                    <jnlp>
                        <!-- default values -->
                        <!--inputTemplateResourcePath>${project.basedir}</inputTemplateResourcePath-->
                        <inputTemplate>src/main/jnlp/template.vm</inputTemplate>
                        <outputFile>jvege.jnlp</outputFile> <!-- defaults to launch.jnlp -->
                        <mainClass>com.jvege.view.MainFrame</mainClass>
                    </jnlp>


                    <!-- SIGNING -->
                    <!-- defining this will automatically sign the jar and its dependencies, if necessary -->

                    <sign>
                        <keystore>jvege-keystore</keystore>
                        <keypass>lovingjVege</keypass>
                        <storepass>lovingjVege</storepass>
                        <alias>jVegeAlias</alias>
                        <validity>3650</validity>

                        <dnameCn>jVege</dnameCn>
                        <dnameOu>orgUnit</dnameOu>
                        <dnameO>org</dnameO>
                        <dnameL>KualaLumpur</dnameL>
                        <dnameSt>KualaLumpur</dnameSt>
                        <dnameC>Malaysia</dnameC>

                        <verify>true</verify> <!-- verify that the signing operation succeeded -->

                        <!-- KEYSTORE MANAGEMENT -->
                        <keystoreConfig>
                            <delete>true</delete> <!-- delete the keystore -->
                            <gen>true</gen>       <!-- optional shortcut to generate the store. -->
                        </keystoreConfig>
                    </sign>

                    <!-- BUILDING PROCESS -->

                    <pack200>false</pack200>
                    <gzip>false</gzip> <!-- default force when pack200 false, true when pack200 selected ?? -->

                    <!-- causes a version attribute to be output in each jar resource element, optional, default is false -->
                    <outputJarVersions>false</outputJarVersions>

                    <!--install>false</install--> <!-- not yet supported -->
                    <verbose>true</verbose>

                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <version>${log4j.version}</version>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>

        <dependency>
            <groupId>toplink.essentials</groupId>
            <artifactId>toplink-essentials</artifactId>
            <version>${toplink.version}</version>
        </dependency>

        <dependency>
            <groupId>toplink.essentials</groupId>
            <artifactId>toplink-essentials-agent</artifactId>
            <version>${toplink.version}</version>
        </dependency>

        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>${h2.version}</version>
        </dependency>
    </dependencies>

</project>
